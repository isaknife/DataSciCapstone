{
  "metadata": {
    "anaconda-cloud": {},
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<center>\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Module%203/images/IDSNlogo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\"  />\n</center>\n\n# Data Analysis with Python\n\nEstimated time needed: **30** minutes\n\n## Objectives\n\nAfter completing this lab you will be able to:\n\n*   Explore features or charecteristics to predict price of car\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Table of Contents</h2>\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n<ol>\n    <li><a href=\"https://#import_data\">Import Data from Module</a></li>\n    <li><a href=\"https://#pattern_visualization\">Analyzing Individual Feature Patterns using Visualization</a></li>\n    <li><a href=\"https://#discriptive_statistics\">Descriptive Statistical Analysis</a></li>\n    <li><a href=\"https://#basic_grouping\">Basics of Grouping</a></li>\n    <li><a href=\"https://#correlation_causation\">Correlation and Causation</a></li>\n    <li><a href=\"https://#anova\">ANOVA</a></li>\n</ol>\n\n</div>\n\n<hr>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>What are the main characteristics that have the most impact on the car price?</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"import_data\">1. Import Data from Module 2</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Setup</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "you are running the lab in your  browser, so we will install the libraries using `piplite`\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#you are running the lab in your  browser, so we will install the libraries using ``piplite``\nimport piplite\nawait piplite.install(['pandas'])\nawait piplite.install(['matplotlib'])\nawait piplite.install(['scipy'])\nawait piplite.install(['seaborn'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Import libraries:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n#install specific version of libraries used in lab\n#! mamba install pandas==1.3.3\n#! mamba install numpy=1.21.2\n#! mamba install scipy=1.7.1-y\n#!  mamba install seaborn=0.9.0-y",
      "metadata": {
        "trusted": true
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport numpy as np",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "This function will download the dataset into your browser\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#This function will download the dataset into your browser \n\nfrom pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Load the data and store it in dataframe `df`:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "This dataset was hosted on IBM Cloud object. Click <a href=\"https://cocl.us/DA101EN_object_storage?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\">HERE</a> for free storage.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "path='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/automobileEDA.csv'",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "you will need to download the dataset; if you are running locally, please comment out the following\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "\\#you will need to download the dataset; if you are running locally, please comment out the following\nawait download(path, \"auto.csv\")\npath=\"auto.csv\"\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(path, \"auto.csv\")\nfilename=\"auto.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "\ndf = pd.read_csv(filename)\ndf.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": [
        {
          "execution_count": 7,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   symboling  normalized-losses         make aspiration num-of-doors  \\\n0          3                122  alfa-romero        std          two   \n1          3                122  alfa-romero        std          two   \n2          1                122  alfa-romero        std          two   \n3          2                164         audi        std         four   \n4          2                164         audi        std         four   \n\n    body-style drive-wheels engine-location  wheel-base    length  ...  \\\n0  convertible          rwd           front        88.6  0.811148  ...   \n1  convertible          rwd           front        88.6  0.811148  ...   \n2    hatchback          rwd           front        94.5  0.822681  ...   \n3        sedan          fwd           front        99.8  0.848630  ...   \n4        sedan          4wd           front        99.4  0.848630  ...   \n\n   compression-ratio  horsepower  peak-rpm city-mpg highway-mpg    price  \\\n0                9.0       111.0    5000.0       21          27  13495.0   \n1                9.0       111.0    5000.0       21          27  16500.0   \n2                9.0       154.0    5000.0       19          26  16500.0   \n3               10.0       102.0    5500.0       24          30  13950.0   \n4                8.0       115.0    5500.0       18          22  17450.0   \n\n  city-L/100km  horsepower-binned  diesel  gas  \n0    11.190476             Medium       0    1  \n1    11.190476             Medium       0    1  \n2    12.368421             Medium       0    1  \n3     9.791667             Medium       0    1  \n4    13.055556             Medium       0    1  \n\n[5 rows x 29 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>...</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>horsepower-binned</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>0.822681</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>154.0</td>\n      <td>5000.0</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500.0</td>\n      <td>12.368421</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>10.0</td>\n      <td>102.0</td>\n      <td>5500.0</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950.0</td>\n      <td>9.791667</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>115.0</td>\n      <td>5500.0</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450.0</td>\n      <td>13.055556</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"pattern_visualization\">2. Analyzing Individual Feature Patterns Using Visualization</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "To install Seaborn we use pip, the Python package manager.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import visualization packages \"Matplotlib\" and \"Seaborn\". Don't forget about \"%matplotlib inline\" to plot in a Jupyter notebook.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>How to choose the right visualization method?</h4>\n<p>When visualizing individual variables, it is important to first understand what type of variable you are dealing with. This will help us find the right visualization method for that variable.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# list the data types for each column\nprint(df.dtypes)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "name": "stdout",
          "text": "symboling              int64\nnormalized-losses      int64\nmake                  object\naspiration            object\nnum-of-doors          object\nbody-style            object\ndrive-wheels          object\nengine-location       object\nwheel-base           float64\nlength               float64\nwidth                float64\nheight               float64\ncurb-weight            int64\nengine-type           object\nnum-of-cylinders      object\nengine-size            int64\nfuel-system           object\nbore                 float64\nstroke               float64\ncompression-ratio    float64\nhorsepower           float64\npeak-rpm             float64\ncity-mpg               int64\nhighway-mpg            int64\nprice                float64\ncity-L/100km         float64\nhorsepower-binned     object\ndiesel                 int64\ngas                    int64\ndtype: object\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h3>Question  #1:</h3>\n\n<b>What is the data type of the column \"peak-rpm\"? </b>\n\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \ndf['peak-rpm'].dtypes",
      "metadata": {
        "trusted": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "execution_count": 10,
          "output_type": "execute_result",
          "data": {
            "text/plain": "dtype('float64')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\ndf['peak-rpm'].dtypes\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "For example, we can calculate the correlation between variables  of type \"int64\" or \"float64\" using the method \"corr\":\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "execution_count": 11,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   symboling  normalized-losses  wheel-base    length  \\\nsymboling           1.000000           0.466264   -0.535987 -0.365404   \nnormalized-losses   0.466264           1.000000   -0.056661  0.019424   \nwheel-base         -0.535987          -0.056661    1.000000  0.876024   \nlength             -0.365404           0.019424    0.876024  1.000000   \nwidth              -0.242423           0.086802    0.814507  0.857170   \nheight             -0.550160          -0.373737    0.590742  0.492063   \ncurb-weight        -0.233118           0.099404    0.782097  0.880665   \nengine-size        -0.110581           0.112360    0.572027  0.685025   \nbore               -0.140019          -0.029862    0.493244  0.608971   \nstroke             -0.008245           0.055563    0.158502  0.124139   \ncompression-ratio  -0.182196          -0.114713    0.250313  0.159733   \nhorsepower          0.075819           0.217299    0.371147  0.579821   \npeak-rpm            0.279740           0.239543   -0.360305 -0.285970   \ncity-mpg           -0.035527          -0.225016   -0.470606 -0.665192   \nhighway-mpg         0.036233          -0.181877   -0.543304 -0.698142   \nprice              -0.082391           0.133999    0.584642  0.690628   \ncity-L/100km        0.066171           0.238567    0.476153  0.657373   \ndiesel             -0.196735          -0.101546    0.307237  0.211187   \ngas                 0.196735           0.101546   -0.307237 -0.211187   \n\n                      width    height  curb-weight  engine-size      bore  \\\nsymboling         -0.242423 -0.550160    -0.233118    -0.110581 -0.140019   \nnormalized-losses  0.086802 -0.373737     0.099404     0.112360 -0.029862   \nwheel-base         0.814507  0.590742     0.782097     0.572027  0.493244   \nlength             0.857170  0.492063     0.880665     0.685025  0.608971   \nwidth              1.000000  0.306002     0.866201     0.729436  0.544885   \nheight             0.306002  1.000000     0.307581     0.074694  0.180449   \ncurb-weight        0.866201  0.307581     1.000000     0.849072  0.644060   \nengine-size        0.729436  0.074694     0.849072     1.000000  0.572609   \nbore               0.544885  0.180449     0.644060     0.572609  1.000000   \nstroke             0.188829 -0.062704     0.167562     0.209523 -0.055390   \ncompression-ratio  0.189867  0.259737     0.156433     0.028889  0.001263   \nhorsepower         0.615077 -0.087027     0.757976     0.822676  0.566936   \npeak-rpm          -0.245800 -0.309974    -0.279361    -0.256733 -0.267392   \ncity-mpg          -0.633531 -0.049800    -0.749543    -0.650546 -0.582027   \nhighway-mpg       -0.680635 -0.104812    -0.794889    -0.679571 -0.591309   \nprice              0.751265  0.135486     0.834415     0.872335  0.543155   \ncity-L/100km       0.673363  0.003811     0.785353     0.745059  0.554610   \ndiesel             0.244356  0.281578     0.221046     0.070779  0.054458   \ngas               -0.244356 -0.281578    -0.221046    -0.070779 -0.054458   \n\n                     stroke  compression-ratio  horsepower  peak-rpm  \\\nsymboling         -0.008245          -0.182196    0.075819  0.279740   \nnormalized-losses  0.055563          -0.114713    0.217299  0.239543   \nwheel-base         0.158502           0.250313    0.371147 -0.360305   \nlength             0.124139           0.159733    0.579821 -0.285970   \nwidth              0.188829           0.189867    0.615077 -0.245800   \nheight            -0.062704           0.259737   -0.087027 -0.309974   \ncurb-weight        0.167562           0.156433    0.757976 -0.279361   \nengine-size        0.209523           0.028889    0.822676 -0.256733   \nbore              -0.055390           0.001263    0.566936 -0.267392   \nstroke             1.000000           0.187923    0.098462 -0.065713   \ncompression-ratio  0.187923           1.000000   -0.214514 -0.435780   \nhorsepower         0.098462          -0.214514    1.000000  0.107885   \npeak-rpm          -0.065713          -0.435780    0.107885  1.000000   \ncity-mpg          -0.034696           0.331425   -0.822214 -0.115413   \nhighway-mpg       -0.035201           0.268465   -0.804575 -0.058598   \nprice              0.082310           0.071107    0.809575 -0.101616   \ncity-L/100km       0.037300          -0.299372    0.889488  0.115830   \ndiesel             0.241303           0.985231   -0.169053 -0.475812   \ngas               -0.241303          -0.985231    0.169053  0.475812   \n\n                   city-mpg  highway-mpg     price  city-L/100km    diesel  \\\nsymboling         -0.035527     0.036233 -0.082391      0.066171 -0.196735   \nnormalized-losses -0.225016    -0.181877  0.133999      0.238567 -0.101546   \nwheel-base        -0.470606    -0.543304  0.584642      0.476153  0.307237   \nlength            -0.665192    -0.698142  0.690628      0.657373  0.211187   \nwidth             -0.633531    -0.680635  0.751265      0.673363  0.244356   \nheight            -0.049800    -0.104812  0.135486      0.003811  0.281578   \ncurb-weight       -0.749543    -0.794889  0.834415      0.785353  0.221046   \nengine-size       -0.650546    -0.679571  0.872335      0.745059  0.070779   \nbore              -0.582027    -0.591309  0.543155      0.554610  0.054458   \nstroke            -0.034696    -0.035201  0.082310      0.037300  0.241303   \ncompression-ratio  0.331425     0.268465  0.071107     -0.299372  0.985231   \nhorsepower        -0.822214    -0.804575  0.809575      0.889488 -0.169053   \npeak-rpm          -0.115413    -0.058598 -0.101616      0.115830 -0.475812   \ncity-mpg           1.000000     0.972044 -0.686571     -0.949713  0.265676   \nhighway-mpg        0.972044     1.000000 -0.704692     -0.930028  0.198690   \nprice             -0.686571    -0.704692  1.000000      0.789898  0.110326   \ncity-L/100km      -0.949713    -0.930028  0.789898      1.000000 -0.241282   \ndiesel             0.265676     0.198690  0.110326     -0.241282  1.000000   \ngas               -0.265676    -0.198690 -0.110326      0.241282 -1.000000   \n\n                        gas  \nsymboling          0.196735  \nnormalized-losses  0.101546  \nwheel-base        -0.307237  \nlength            -0.211187  \nwidth             -0.244356  \nheight            -0.281578  \ncurb-weight       -0.221046  \nengine-size       -0.070779  \nbore              -0.054458  \nstroke            -0.241303  \ncompression-ratio -0.985231  \nhorsepower         0.169053  \npeak-rpm           0.475812  \ncity-mpg          -0.265676  \nhighway-mpg       -0.198690  \nprice             -0.110326  \ncity-L/100km       0.241282  \ndiesel            -1.000000  \ngas                1.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>symboling</th>\n      <td>1.000000</td>\n      <td>0.466264</td>\n      <td>-0.535987</td>\n      <td>-0.365404</td>\n      <td>-0.242423</td>\n      <td>-0.550160</td>\n      <td>-0.233118</td>\n      <td>-0.110581</td>\n      <td>-0.140019</td>\n      <td>-0.008245</td>\n      <td>-0.182196</td>\n      <td>0.075819</td>\n      <td>0.279740</td>\n      <td>-0.035527</td>\n      <td>0.036233</td>\n      <td>-0.082391</td>\n      <td>0.066171</td>\n      <td>-0.196735</td>\n      <td>0.196735</td>\n    </tr>\n    <tr>\n      <th>normalized-losses</th>\n      <td>0.466264</td>\n      <td>1.000000</td>\n      <td>-0.056661</td>\n      <td>0.019424</td>\n      <td>0.086802</td>\n      <td>-0.373737</td>\n      <td>0.099404</td>\n      <td>0.112360</td>\n      <td>-0.029862</td>\n      <td>0.055563</td>\n      <td>-0.114713</td>\n      <td>0.217299</td>\n      <td>0.239543</td>\n      <td>-0.225016</td>\n      <td>-0.181877</td>\n      <td>0.133999</td>\n      <td>0.238567</td>\n      <td>-0.101546</td>\n      <td>0.101546</td>\n    </tr>\n    <tr>\n      <th>wheel-base</th>\n      <td>-0.535987</td>\n      <td>-0.056661</td>\n      <td>1.000000</td>\n      <td>0.876024</td>\n      <td>0.814507</td>\n      <td>0.590742</td>\n      <td>0.782097</td>\n      <td>0.572027</td>\n      <td>0.493244</td>\n      <td>0.158502</td>\n      <td>0.250313</td>\n      <td>0.371147</td>\n      <td>-0.360305</td>\n      <td>-0.470606</td>\n      <td>-0.543304</td>\n      <td>0.584642</td>\n      <td>0.476153</td>\n      <td>0.307237</td>\n      <td>-0.307237</td>\n    </tr>\n    <tr>\n      <th>length</th>\n      <td>-0.365404</td>\n      <td>0.019424</td>\n      <td>0.876024</td>\n      <td>1.000000</td>\n      <td>0.857170</td>\n      <td>0.492063</td>\n      <td>0.880665</td>\n      <td>0.685025</td>\n      <td>0.608971</td>\n      <td>0.124139</td>\n      <td>0.159733</td>\n      <td>0.579821</td>\n      <td>-0.285970</td>\n      <td>-0.665192</td>\n      <td>-0.698142</td>\n      <td>0.690628</td>\n      <td>0.657373</td>\n      <td>0.211187</td>\n      <td>-0.211187</td>\n    </tr>\n    <tr>\n      <th>width</th>\n      <td>-0.242423</td>\n      <td>0.086802</td>\n      <td>0.814507</td>\n      <td>0.857170</td>\n      <td>1.000000</td>\n      <td>0.306002</td>\n      <td>0.866201</td>\n      <td>0.729436</td>\n      <td>0.544885</td>\n      <td>0.188829</td>\n      <td>0.189867</td>\n      <td>0.615077</td>\n      <td>-0.245800</td>\n      <td>-0.633531</td>\n      <td>-0.680635</td>\n      <td>0.751265</td>\n      <td>0.673363</td>\n      <td>0.244356</td>\n      <td>-0.244356</td>\n    </tr>\n    <tr>\n      <th>height</th>\n      <td>-0.550160</td>\n      <td>-0.373737</td>\n      <td>0.590742</td>\n      <td>0.492063</td>\n      <td>0.306002</td>\n      <td>1.000000</td>\n      <td>0.307581</td>\n      <td>0.074694</td>\n      <td>0.180449</td>\n      <td>-0.062704</td>\n      <td>0.259737</td>\n      <td>-0.087027</td>\n      <td>-0.309974</td>\n      <td>-0.049800</td>\n      <td>-0.104812</td>\n      <td>0.135486</td>\n      <td>0.003811</td>\n      <td>0.281578</td>\n      <td>-0.281578</td>\n    </tr>\n    <tr>\n      <th>curb-weight</th>\n      <td>-0.233118</td>\n      <td>0.099404</td>\n      <td>0.782097</td>\n      <td>0.880665</td>\n      <td>0.866201</td>\n      <td>0.307581</td>\n      <td>1.000000</td>\n      <td>0.849072</td>\n      <td>0.644060</td>\n      <td>0.167562</td>\n      <td>0.156433</td>\n      <td>0.757976</td>\n      <td>-0.279361</td>\n      <td>-0.749543</td>\n      <td>-0.794889</td>\n      <td>0.834415</td>\n      <td>0.785353</td>\n      <td>0.221046</td>\n      <td>-0.221046</td>\n    </tr>\n    <tr>\n      <th>engine-size</th>\n      <td>-0.110581</td>\n      <td>0.112360</td>\n      <td>0.572027</td>\n      <td>0.685025</td>\n      <td>0.729436</td>\n      <td>0.074694</td>\n      <td>0.849072</td>\n      <td>1.000000</td>\n      <td>0.572609</td>\n      <td>0.209523</td>\n      <td>0.028889</td>\n      <td>0.822676</td>\n      <td>-0.256733</td>\n      <td>-0.650546</td>\n      <td>-0.679571</td>\n      <td>0.872335</td>\n      <td>0.745059</td>\n      <td>0.070779</td>\n      <td>-0.070779</td>\n    </tr>\n    <tr>\n      <th>bore</th>\n      <td>-0.140019</td>\n      <td>-0.029862</td>\n      <td>0.493244</td>\n      <td>0.608971</td>\n      <td>0.544885</td>\n      <td>0.180449</td>\n      <td>0.644060</td>\n      <td>0.572609</td>\n      <td>1.000000</td>\n      <td>-0.055390</td>\n      <td>0.001263</td>\n      <td>0.566936</td>\n      <td>-0.267392</td>\n      <td>-0.582027</td>\n      <td>-0.591309</td>\n      <td>0.543155</td>\n      <td>0.554610</td>\n      <td>0.054458</td>\n      <td>-0.054458</td>\n    </tr>\n    <tr>\n      <th>stroke</th>\n      <td>-0.008245</td>\n      <td>0.055563</td>\n      <td>0.158502</td>\n      <td>0.124139</td>\n      <td>0.188829</td>\n      <td>-0.062704</td>\n      <td>0.167562</td>\n      <td>0.209523</td>\n      <td>-0.055390</td>\n      <td>1.000000</td>\n      <td>0.187923</td>\n      <td>0.098462</td>\n      <td>-0.065713</td>\n      <td>-0.034696</td>\n      <td>-0.035201</td>\n      <td>0.082310</td>\n      <td>0.037300</td>\n      <td>0.241303</td>\n      <td>-0.241303</td>\n    </tr>\n    <tr>\n      <th>compression-ratio</th>\n      <td>-0.182196</td>\n      <td>-0.114713</td>\n      <td>0.250313</td>\n      <td>0.159733</td>\n      <td>0.189867</td>\n      <td>0.259737</td>\n      <td>0.156433</td>\n      <td>0.028889</td>\n      <td>0.001263</td>\n      <td>0.187923</td>\n      <td>1.000000</td>\n      <td>-0.214514</td>\n      <td>-0.435780</td>\n      <td>0.331425</td>\n      <td>0.268465</td>\n      <td>0.071107</td>\n      <td>-0.299372</td>\n      <td>0.985231</td>\n      <td>-0.985231</td>\n    </tr>\n    <tr>\n      <th>horsepower</th>\n      <td>0.075819</td>\n      <td>0.217299</td>\n      <td>0.371147</td>\n      <td>0.579821</td>\n      <td>0.615077</td>\n      <td>-0.087027</td>\n      <td>0.757976</td>\n      <td>0.822676</td>\n      <td>0.566936</td>\n      <td>0.098462</td>\n      <td>-0.214514</td>\n      <td>1.000000</td>\n      <td>0.107885</td>\n      <td>-0.822214</td>\n      <td>-0.804575</td>\n      <td>0.809575</td>\n      <td>0.889488</td>\n      <td>-0.169053</td>\n      <td>0.169053</td>\n    </tr>\n    <tr>\n      <th>peak-rpm</th>\n      <td>0.279740</td>\n      <td>0.239543</td>\n      <td>-0.360305</td>\n      <td>-0.285970</td>\n      <td>-0.245800</td>\n      <td>-0.309974</td>\n      <td>-0.279361</td>\n      <td>-0.256733</td>\n      <td>-0.267392</td>\n      <td>-0.065713</td>\n      <td>-0.435780</td>\n      <td>0.107885</td>\n      <td>1.000000</td>\n      <td>-0.115413</td>\n      <td>-0.058598</td>\n      <td>-0.101616</td>\n      <td>0.115830</td>\n      <td>-0.475812</td>\n      <td>0.475812</td>\n    </tr>\n    <tr>\n      <th>city-mpg</th>\n      <td>-0.035527</td>\n      <td>-0.225016</td>\n      <td>-0.470606</td>\n      <td>-0.665192</td>\n      <td>-0.633531</td>\n      <td>-0.049800</td>\n      <td>-0.749543</td>\n      <td>-0.650546</td>\n      <td>-0.582027</td>\n      <td>-0.034696</td>\n      <td>0.331425</td>\n      <td>-0.822214</td>\n      <td>-0.115413</td>\n      <td>1.000000</td>\n      <td>0.972044</td>\n      <td>-0.686571</td>\n      <td>-0.949713</td>\n      <td>0.265676</td>\n      <td>-0.265676</td>\n    </tr>\n    <tr>\n      <th>highway-mpg</th>\n      <td>0.036233</td>\n      <td>-0.181877</td>\n      <td>-0.543304</td>\n      <td>-0.698142</td>\n      <td>-0.680635</td>\n      <td>-0.104812</td>\n      <td>-0.794889</td>\n      <td>-0.679571</td>\n      <td>-0.591309</td>\n      <td>-0.035201</td>\n      <td>0.268465</td>\n      <td>-0.804575</td>\n      <td>-0.058598</td>\n      <td>0.972044</td>\n      <td>1.000000</td>\n      <td>-0.704692</td>\n      <td>-0.930028</td>\n      <td>0.198690</td>\n      <td>-0.198690</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.082391</td>\n      <td>0.133999</td>\n      <td>0.584642</td>\n      <td>0.690628</td>\n      <td>0.751265</td>\n      <td>0.135486</td>\n      <td>0.834415</td>\n      <td>0.872335</td>\n      <td>0.543155</td>\n      <td>0.082310</td>\n      <td>0.071107</td>\n      <td>0.809575</td>\n      <td>-0.101616</td>\n      <td>-0.686571</td>\n      <td>-0.704692</td>\n      <td>1.000000</td>\n      <td>0.789898</td>\n      <td>0.110326</td>\n      <td>-0.110326</td>\n    </tr>\n    <tr>\n      <th>city-L/100km</th>\n      <td>0.066171</td>\n      <td>0.238567</td>\n      <td>0.476153</td>\n      <td>0.657373</td>\n      <td>0.673363</td>\n      <td>0.003811</td>\n      <td>0.785353</td>\n      <td>0.745059</td>\n      <td>0.554610</td>\n      <td>0.037300</td>\n      <td>-0.299372</td>\n      <td>0.889488</td>\n      <td>0.115830</td>\n      <td>-0.949713</td>\n      <td>-0.930028</td>\n      <td>0.789898</td>\n      <td>1.000000</td>\n      <td>-0.241282</td>\n      <td>0.241282</td>\n    </tr>\n    <tr>\n      <th>diesel</th>\n      <td>-0.196735</td>\n      <td>-0.101546</td>\n      <td>0.307237</td>\n      <td>0.211187</td>\n      <td>0.244356</td>\n      <td>0.281578</td>\n      <td>0.221046</td>\n      <td>0.070779</td>\n      <td>0.054458</td>\n      <td>0.241303</td>\n      <td>0.985231</td>\n      <td>-0.169053</td>\n      <td>-0.475812</td>\n      <td>0.265676</td>\n      <td>0.198690</td>\n      <td>0.110326</td>\n      <td>-0.241282</td>\n      <td>1.000000</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>gas</th>\n      <td>0.196735</td>\n      <td>0.101546</td>\n      <td>-0.307237</td>\n      <td>-0.211187</td>\n      <td>-0.244356</td>\n      <td>-0.281578</td>\n      <td>-0.221046</td>\n      <td>-0.070779</td>\n      <td>-0.054458</td>\n      <td>-0.241303</td>\n      <td>-0.985231</td>\n      <td>0.169053</td>\n      <td>0.475812</td>\n      <td>-0.265676</td>\n      <td>-0.198690</td>\n      <td>-0.110326</td>\n      <td>0.241282</td>\n      <td>-1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "The diagonal elements are always one; we will study correlation more precisely Pearson correlation in-depth at the end of the notebook.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h3> Question  #2: </h3>\n\n<p>Find the correlation between the following columns: bore, stroke, compression-ratio, and horsepower.</p>\n<p>Hint: if you would like to select those columns, use the following syntax: df[['bore','stroke','compression-ratio','horsepower']]</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \n",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\ndf[['bore', 'stroke', 'compression-ratio', 'horsepower']].corr()\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>Continuous Numerical Variables:</h2> \n\n<p>Continuous numerical variables are variables that may contain any value within some range. They can be of type \"int64\" or \"float64\". A great way to visualize these variables is by using scatterplots with fitted lines.</p>\n\n<p>In order to start understanding the (linear) relationship between an individual variable and the price, we can use \"regplot\" which plots the scatterplot plus the fitted regression line for the data.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's see several examples of different linear relationships:\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Positive Linear Relationship</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's find the scatterplot of \"engine-size\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Engine size as potential predictor variable of price\nsns.regplot(x=\"engine-size\", y=\"price\", data=df)\nplt.ylim(0,)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/plain": "(0.0, 53375.06757875312)"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>As the engine-size goes up, the price goes up: this indicates a positive direct correlation between these two variables. Engine size seems like a pretty good predictor of price since the regression line is almost a perfect diagonal line.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'engine-size' and 'price' and see that it's approximately 0.87.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[[\"engine-size\", \"price\"]].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "execution_count": 13,
          "output_type": "execute_result",
          "data": {
            "text/plain": "             engine-size     price\nengine-size     1.000000  0.872335\nprice           0.872335  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>engine-size</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>engine-size</th>\n      <td>1.000000</td>\n      <td>0.872335</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>0.872335</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Highway mpg is a potential predictor variable of price. Let's find the scatterplot of \"highway-mpg\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=\"highway-mpg\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "execution_count": 14,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='highway-mpg', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>As highway-mpg goes up, the price goes down: this indicates an inverse/negative relationship between these two variables. Highway mpg could potentially be a predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'highway-mpg' and 'price' and see it's approximately -0.704.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[['highway-mpg', 'price']].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": [
        {
          "execution_count": 15,
          "output_type": "execute_result",
          "data": {
            "text/plain": "             highway-mpg     price\nhighway-mpg     1.000000 -0.704692\nprice          -0.704692  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>highway-mpg</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>highway-mpg</th>\n      <td>1.000000</td>\n      <td>-0.704692</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.704692</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Weak Linear Relationship</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's see if \"peak-rpm\" is a predictor variable of \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=\"peak-rpm\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": [
        {
          "execution_count": 16,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='peak-rpm', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Peak rpm does not seem like a good predictor of the price at all since the regression line is close to horizontal. Also, the data points are very scattered and far from the fitted line, showing lots of variability. Therefore, it's not a reliable variable.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can examine the correlation between 'peak-rpm' and 'price' and see it's approximately -0.101616.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df[['peak-rpm','price']].corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": [
        {
          "execution_count": 17,
          "output_type": "execute_result",
          "data": {
            "text/plain": "          peak-rpm     price\npeak-rpm  1.000000 -0.101616\nprice    -0.101616  1.000000",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>peak-rpm</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>peak-rpm</th>\n      <td>1.000000</td>\n      <td>-0.101616</td>\n    </tr>\n    <tr>\n      <th>price</th>\n      <td>-0.101616</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": " <div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1> Question  3 a): </h1>\n\n<p>Find the correlation  between x=\"stroke\" and y=\"price\".</p>\n<p>Hint: if you would like to select those columns, use the following syntax: df[[\"stroke\",\"price\"]].  </p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n\n#The correlation is 0.0823, the non-diagonal elements of the table.\n\ndf[[\"stroke\",\"price\"]].corr()\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1>Question  3 b):</h1>\n\n<p>Given the correlation results between \"price\" and \"stroke\", do you expect a linear relationship?</p> \n<p>Verify your results using the function \"regplot()\".</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \n",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n\n#There is a weak correlation between the variable 'stroke' and 'price.' as such regression will not work well. We can see this using \"regplot\" to demonstrate this.\n\n#Code: \nsns.regplot(x=\"stroke\", y=\"price\", data=df)\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Categorical Variables</h3>\n\n<p>These are variables that describe a 'characteristic' of a data unit, and are selected from a small group of categories. The categorical variables can have the type \"object\" or \"int64\". A good way to visualize categorical variables is by using boxplots.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's look at the relationship between \"body-style\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x=\"body-style\", y=\"price\", data=df)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 18,
      "outputs": [
        {
          "execution_count": 18,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='body-style', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>We see that the distributions of price between the different body-style categories have a significant overlap, so body-style would not be a good predictor of price. Let's examine engine \"engine-location\" and \"price\":</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x=\"engine-location\", y=\"price\", data=df)",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='engine-location', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Here we see that the distribution of price between these two engine-location categories, front and rear, are distinct enough to take engine-location as a potential good predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's examine \"drive-wheels\" and \"price\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# drive-wheels\nsns.boxplot(x=\"drive-wheels\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<p>Here we see that the distribution of price between the different drive-wheels categories differs. As such, drive-wheels could potentially be a predictor of price.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"discriptive_statistics\">3. Descriptive Statistical Analysis</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Let's first take a look at the variables by utilizing a description method.</p>\n\n<p>The <b>describe</b> function automatically computes basic statistics for all continuous variables. Any NaN values are automatically skipped in these statistics.</p>\n\nThis will show:\n\n<ul>\n    <li>the count of that variable</li>\n    <li>the mean</li>\n    <li>the standard deviation (std)</li> \n    <li>the minimum value</li>\n    <li>the IQR (Interquartile Range: 25%, 50% and 75%)</li>\n    <li>the maximum value</li>\n<ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can apply the method \"describe\" as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "execution_count": 20,
          "output_type": "execute_result",
          "data": {
            "text/plain": "        symboling  normalized-losses  wheel-base      length       width  \\\ncount  201.000000          201.00000  201.000000  201.000000  201.000000   \nmean     0.840796          122.00000   98.797015    0.837102    0.915126   \nstd      1.254802           31.99625    6.066366    0.059213    0.029187   \nmin     -2.000000           65.00000   86.600000    0.678039    0.837500   \n25%      0.000000          101.00000   94.500000    0.801538    0.890278   \n50%      1.000000          122.00000   97.000000    0.832292    0.909722   \n75%      2.000000          137.00000  102.400000    0.881788    0.925000   \nmax      3.000000          256.00000  120.900000    1.000000    1.000000   \n\n           height  curb-weight  engine-size        bore      stroke  \\\ncount  201.000000   201.000000   201.000000  201.000000  197.000000   \nmean    53.766667  2555.666667   126.875622    3.330692    3.256904   \nstd      2.447822   517.296727    41.546834    0.268072    0.319256   \nmin     47.800000  1488.000000    61.000000    2.540000    2.070000   \n25%     52.000000  2169.000000    98.000000    3.150000    3.110000   \n50%     54.100000  2414.000000   120.000000    3.310000    3.290000   \n75%     55.500000  2926.000000   141.000000    3.580000    3.410000   \nmax     59.800000  4066.000000   326.000000    3.940000    4.170000   \n\n       compression-ratio  horsepower     peak-rpm    city-mpg  highway-mpg  \\\ncount         201.000000  201.000000   201.000000  201.000000   201.000000   \nmean           10.164279  103.405534  5117.665368   25.179104    30.686567   \nstd             4.004965   37.365700   478.113805    6.423220     6.815150   \nmin             7.000000   48.000000  4150.000000   13.000000    16.000000   \n25%             8.600000   70.000000  4800.000000   19.000000    25.000000   \n50%             9.000000   95.000000  5125.369458   24.000000    30.000000   \n75%             9.400000  116.000000  5500.000000   30.000000    34.000000   \nmax            23.000000  262.000000  6600.000000   49.000000    54.000000   \n\n              price  city-L/100km      diesel         gas  \ncount    201.000000    201.000000  201.000000  201.000000  \nmean   13207.129353      9.944145    0.099502    0.900498  \nstd     7947.066342      2.534599    0.300083    0.300083  \nmin     5118.000000      4.795918    0.000000    0.000000  \n25%     7775.000000      7.833333    0.000000    1.000000  \n50%    10295.000000      9.791667    0.000000    1.000000  \n75%    16500.000000     12.368421    0.000000    1.000000  \nmax    45400.000000     18.076923    1.000000    1.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>width</th>\n      <th>height</th>\n      <th>curb-weight</th>\n      <th>engine-size</th>\n      <th>bore</th>\n      <th>stroke</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>201.000000</td>\n      <td>201.00000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>197.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n      <td>201.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.840796</td>\n      <td>122.00000</td>\n      <td>98.797015</td>\n      <td>0.837102</td>\n      <td>0.915126</td>\n      <td>53.766667</td>\n      <td>2555.666667</td>\n      <td>126.875622</td>\n      <td>3.330692</td>\n      <td>3.256904</td>\n      <td>10.164279</td>\n      <td>103.405534</td>\n      <td>5117.665368</td>\n      <td>25.179104</td>\n      <td>30.686567</td>\n      <td>13207.129353</td>\n      <td>9.944145</td>\n      <td>0.099502</td>\n      <td>0.900498</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.254802</td>\n      <td>31.99625</td>\n      <td>6.066366</td>\n      <td>0.059213</td>\n      <td>0.029187</td>\n      <td>2.447822</td>\n      <td>517.296727</td>\n      <td>41.546834</td>\n      <td>0.268072</td>\n      <td>0.319256</td>\n      <td>4.004965</td>\n      <td>37.365700</td>\n      <td>478.113805</td>\n      <td>6.423220</td>\n      <td>6.815150</td>\n      <td>7947.066342</td>\n      <td>2.534599</td>\n      <td>0.300083</td>\n      <td>0.300083</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-2.000000</td>\n      <td>65.00000</td>\n      <td>86.600000</td>\n      <td>0.678039</td>\n      <td>0.837500</td>\n      <td>47.800000</td>\n      <td>1488.000000</td>\n      <td>61.000000</td>\n      <td>2.540000</td>\n      <td>2.070000</td>\n      <td>7.000000</td>\n      <td>48.000000</td>\n      <td>4150.000000</td>\n      <td>13.000000</td>\n      <td>16.000000</td>\n      <td>5118.000000</td>\n      <td>4.795918</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.000000</td>\n      <td>101.00000</td>\n      <td>94.500000</td>\n      <td>0.801538</td>\n      <td>0.890278</td>\n      <td>52.000000</td>\n      <td>2169.000000</td>\n      <td>98.000000</td>\n      <td>3.150000</td>\n      <td>3.110000</td>\n      <td>8.600000</td>\n      <td>70.000000</td>\n      <td>4800.000000</td>\n      <td>19.000000</td>\n      <td>25.000000</td>\n      <td>7775.000000</td>\n      <td>7.833333</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.000000</td>\n      <td>122.00000</td>\n      <td>97.000000</td>\n      <td>0.832292</td>\n      <td>0.909722</td>\n      <td>54.100000</td>\n      <td>2414.000000</td>\n      <td>120.000000</td>\n      <td>3.310000</td>\n      <td>3.290000</td>\n      <td>9.000000</td>\n      <td>95.000000</td>\n      <td>5125.369458</td>\n      <td>24.000000</td>\n      <td>30.000000</td>\n      <td>10295.000000</td>\n      <td>9.791667</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.000000</td>\n      <td>137.00000</td>\n      <td>102.400000</td>\n      <td>0.881788</td>\n      <td>0.925000</td>\n      <td>55.500000</td>\n      <td>2926.000000</td>\n      <td>141.000000</td>\n      <td>3.580000</td>\n      <td>3.410000</td>\n      <td>9.400000</td>\n      <td>116.000000</td>\n      <td>5500.000000</td>\n      <td>30.000000</td>\n      <td>34.000000</td>\n      <td>16500.000000</td>\n      <td>12.368421</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.000000</td>\n      <td>256.00000</td>\n      <td>120.900000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>59.800000</td>\n      <td>4066.000000</td>\n      <td>326.000000</td>\n      <td>3.940000</td>\n      <td>4.170000</td>\n      <td>23.000000</td>\n      <td>262.000000</td>\n      <td>6600.000000</td>\n      <td>49.000000</td>\n      <td>54.000000</td>\n      <td>45400.000000</td>\n      <td>18.076923</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "The default setting of \"describe\" skips variables of type object. We can apply the method \"describe\" on the variables of type 'object' as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe(include=['object'])",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "          make aspiration num-of-doors body-style drive-wheels  \\\ncount      201        201          201        201          201   \nunique      22          2            2          5            3   \ntop     toyota        std         four      sedan          fwd   \nfreq        32        165          115         94          118   \n\n       engine-location engine-type num-of-cylinders fuel-system  \\\ncount              201         201              201         201   \nunique               2           6                7           8   \ntop              front         ohc             four        mpfi   \nfreq               198         145              157          92   \n\n       horsepower-binned  \ncount                200  \nunique                 3  \ntop                  Low  \nfreq                 115  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>engine-type</th>\n      <th>num-of-cylinders</th>\n      <th>fuel-system</th>\n      <th>horsepower-binned</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>201</td>\n      <td>200</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>22</td>\n      <td>2</td>\n      <td>2</td>\n      <td>5</td>\n      <td>3</td>\n      <td>2</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>toyota</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>ohc</td>\n      <td>four</td>\n      <td>mpfi</td>\n      <td>Low</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>32</td>\n      <td>165</td>\n      <td>115</td>\n      <td>94</td>\n      <td>118</td>\n      <td>198</td>\n      <td>145</td>\n      <td>157</td>\n      <td>92</td>\n      <td>115</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Value Counts</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Value counts is a good way of understanding how many units of each characteristic/variable we have. We can apply the \"value_counts\" method on the column \"drive-wheels\". Don’t forget the method \"value_counts\" only works on pandas series, not pandas dataframes. As a result, we only include one bracket <code>df['drive-wheels']</code>, not two brackets <code>df[['drive-wheels']]</code>.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].value_counts()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "fwd    118\nrwd     75\n4wd      8\nName: drive-wheels, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can convert the series to a dataframe as follows:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].value_counts().to_frame()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     drive-wheels\nfwd           118\nrwd            75\n4wd             8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Let's repeat the above steps but save the results to the dataframe \"drive_wheels_counts\" and rename the column  'drive-wheels' to 'value_counts'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "drive_wheels_counts = df['drive-wheels'].value_counts().to_frame()\ndrive_wheels_counts.rename(columns={'drive-wheels': 'value_counts'}, inplace=True)\ndrive_wheels_counts",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     value_counts\nfwd           118\nrwd            75\n4wd             8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Now let's rename the index to 'drive-wheels':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "drive_wheels_counts.index.name = 'drive-wheels'\ndrive_wheels_counts",
      "metadata": {
        "trusted": true
      },
      "execution_count": 25,
      "outputs": [
        {
          "execution_count": 25,
          "output_type": "execute_result",
          "data": {
            "text/plain": "              value_counts\ndrive-wheels              \nfwd                    118\nrwd                     75\n4wd                      8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fwd</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>4wd</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can repeat the above process for the variable 'engine-location'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# engine-location as variable\nengine_loc_counts = df['engine-location'].value_counts().to_frame()\nengine_loc_counts.rename(columns={'engine-location': 'value_counts'}, inplace=True)\nengine_loc_counts.index.name = 'engine-location'\nengine_loc_counts.head(10)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": [
        {
          "execution_count": 26,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                 value_counts\nengine-location              \nfront                     198\nrear                        3",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>value_counts</th>\n    </tr>\n    <tr>\n      <th>engine-location</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>front</th>\n      <td>198</td>\n    </tr>\n    <tr>\n      <th>rear</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>After examining the value counts of the engine location, we see that engine location would not be a good predictor variable for the price. This is because we only have three cars with a rear engine and 198 with an engine in the front, so this result is skewed. Thus, we are not able to draw any conclusions about the engine location.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"basic_grouping\">4. Basics of Grouping</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>The \"groupby\" method groups data by different categories. The data is grouped based on one or several variables, and analysis is performed on the individual groups.</p>\n\n<p>For example, let's group by the variable \"drive-wheels\". We see that there are 3 different categories of drive wheels.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['drive-wheels'].unique()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "execution_count": 27,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array(['rwd', 'fwd', '4wd'], dtype=object)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>If we want to know, on average, which type of drive wheel is most valuable, we can group \"drive-wheels\" and then average them.</p>\n\n<p>We can select the columns 'drive-wheels', 'body-style' and 'price', then assign it to the variable \"df_group_one\".</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df_group_one = df[['drive-wheels','body-style','price']]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We can then calculate the average price for each of the different categories of data.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# grouping results\ndf_group_one = df_group_one.groupby(['drive-wheels'],as_index=False).mean()\ndf_group_one",
      "metadata": {
        "trusted": true
      },
      "execution_count": 29,
      "outputs": [
        {
          "execution_count": 29,
          "output_type": "execute_result",
          "data": {
            "text/plain": "  drive-wheels         price\n0          4wd  10241.000000\n1          fwd   9244.779661\n2          rwd  19757.613333",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4wd</td>\n      <td>10241.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fwd</td>\n      <td>9244.779661</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>rwd</td>\n      <td>19757.613333</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>From our data, it seems rear-wheel drive vehicles are, on average, the most expensive, while 4-wheel and front-wheel are approximately the same in price.</p>\n\n<p>You can also group by multiple variables. For example, let's group by both 'drive-wheels' and 'body-style'. This groups the dataframe by the unique combination of 'drive-wheels' and 'body-style'. We can store the results in the variable 'grouped_test1'.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# grouping results\ndf_gptest = df[['drive-wheels','body-style','price']]\ngrouped_test1 = df_gptest.groupby(['drive-wheels','body-style'],as_index=False).mean()\ngrouped_test1",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": [
        {
          "execution_count": 30,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   drive-wheels   body-style         price\n0           4wd    hatchback   7603.000000\n1           4wd        sedan  12647.333333\n2           4wd        wagon   9095.750000\n3           fwd  convertible  11595.000000\n4           fwd      hardtop   8249.000000\n5           fwd    hatchback   8396.387755\n6           fwd        sedan   9811.800000\n7           fwd        wagon   9997.333333\n8           rwd  convertible  23949.600000\n9           rwd      hardtop  24202.714286\n10          rwd    hatchback  14337.777778\n11          rwd        sedan  21711.833333\n12          rwd        wagon  16994.222222",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>drive-wheels</th>\n      <th>body-style</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4wd</td>\n      <td>hatchback</td>\n      <td>7603.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4wd</td>\n      <td>sedan</td>\n      <td>12647.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4wd</td>\n      <td>wagon</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fwd</td>\n      <td>convertible</td>\n      <td>11595.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>fwd</td>\n      <td>hardtop</td>\n      <td>8249.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>fwd</td>\n      <td>hatchback</td>\n      <td>8396.387755</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>fwd</td>\n      <td>sedan</td>\n      <td>9811.800000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>fwd</td>\n      <td>wagon</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>rwd</td>\n      <td>convertible</td>\n      <td>23949.600000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>rwd</td>\n      <td>hardtop</td>\n      <td>24202.714286</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>rwd</td>\n      <td>hatchback</td>\n      <td>14337.777778</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>rwd</td>\n      <td>sedan</td>\n      <td>21711.833333</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>rwd</td>\n      <td>wagon</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>This grouped data is much easier to visualize when it is made into a pivot table. A pivot table is like an Excel spreadsheet, with one variable along the column and another along the row. We can convert the dataframe to a pivot table using the method \"pivot\" to create a pivot table from the groups.</p>\n\n<p>In this case, we will leave the drive-wheels variable as the rows of the table, and pivot body-style to become the columns of the table:</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_pivot = grouped_test1.pivot(index='drive-wheels',columns='body-style')\ngrouped_pivot",
      "metadata": {
        "trusted": true
      },
      "execution_count": 31,
      "outputs": [
        {
          "execution_count": 31,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   price                                            \\\nbody-style   convertible       hardtop     hatchback         sedan   \ndrive-wheels                                                         \n4wd                  NaN           NaN   7603.000000  12647.333333   \nfwd              11595.0   8249.000000   8396.387755   9811.800000   \nrwd              23949.6  24202.714286  14337.777778  21711.833333   \n\n                            \nbody-style           wagon  \ndrive-wheels                \n4wd            9095.750000  \nfwd            9997.333333  \nrwd           16994.222222  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"5\" halign=\"left\">price</th>\n    </tr>\n    <tr>\n      <th>body-style</th>\n      <th>convertible</th>\n      <th>hardtop</th>\n      <th>hatchback</th>\n      <th>sedan</th>\n      <th>wagon</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4wd</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7603.000000</td>\n      <td>12647.333333</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>fwd</th>\n      <td>11595.0</td>\n      <td>8249.000000</td>\n      <td>8396.387755</td>\n      <td>9811.800000</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>23949.6</td>\n      <td>24202.714286</td>\n      <td>14337.777778</td>\n      <td>21711.833333</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Often, we won't have data for some of the pivot cells. We can fill these missing cells with the value 0, but any other value could potentially be used as well. It should be mentioned that missing data is quite a complex subject and is an entire course on its own.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_pivot = grouped_pivot.fillna(0) #fill missing values with 0\ngrouped_pivot",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": 32,
      "outputs": [
        {
          "execution_count": 32,
          "output_type": "execute_result",
          "data": {
            "text/plain": "                   price                                            \\\nbody-style   convertible       hardtop     hatchback         sedan   \ndrive-wheels                                                         \n4wd                  0.0      0.000000   7603.000000  12647.333333   \nfwd              11595.0   8249.000000   8396.387755   9811.800000   \nrwd              23949.6  24202.714286  14337.777778  21711.833333   \n\n                            \nbody-style           wagon  \ndrive-wheels                \n4wd            9095.750000  \nfwd            9997.333333  \nrwd           16994.222222  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"5\" halign=\"left\">price</th>\n    </tr>\n    <tr>\n      <th>body-style</th>\n      <th>convertible</th>\n      <th>hardtop</th>\n      <th>hatchback</th>\n      <th>sedan</th>\n      <th>wagon</th>\n    </tr>\n    <tr>\n      <th>drive-wheels</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4wd</th>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>7603.000000</td>\n      <td>12647.333333</td>\n      <td>9095.750000</td>\n    </tr>\n    <tr>\n      <th>fwd</th>\n      <td>11595.0</td>\n      <td>8249.000000</td>\n      <td>8396.387755</td>\n      <td>9811.800000</td>\n      <td>9997.333333</td>\n    </tr>\n    <tr>\n      <th>rwd</th>\n      <td>23949.6</td>\n      <td>24202.714286</td>\n      <td>14337.777778</td>\n      <td>21711.833333</td>\n      <td>16994.222222</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n<h1>Question 4:</h1>\n\n<p>Use the \"groupby\" function to find the average \"price\" of each car based on \"body-style\".</p>\n</div>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# Write your code below and press Shift+Enter to execute \n# grouping results\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<details><summary>Click here for the solution</summary>\n\n```python\n# grouping results\ndf_gptest2 = df[['body-style','price']]\ngrouped_test_bodystyle = df_gptest2.groupby(['body-style'],as_index= False).mean()\ngrouped_test_bodystyle\n\n```\n\n</details>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you did not import \"pyplot\", let's do it again.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\n%matplotlib inline ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Variables: Drive Wheels and Body Style vs. Price</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's use a heat map to visualize the relationship between Body Style vs Price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "#use the grouped results\nplt.pcolor(grouped_pivot, cmap='RdBu')\nplt.colorbar()\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x5104fa8>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>The heatmap plots the target variable (price) proportional to colour with respect to the variables 'drive-wheel' and 'body-style' on the vertical and horizontal axis, respectively. This allows us to visualize how the price is related to 'drive-wheel' and 'body-style'.</p>\n\n<p>The default labels convey no useful information to us. Let's change that:</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "fig, ax = plt.subplots()\nim = ax.pcolor(grouped_pivot, cmap='RdBu')\n\n#label names\nrow_labels = grouped_pivot.columns.levels[1]\ncol_labels = grouped_pivot.index\n\n#move ticks and labels to the center\nax.set_xticks(np.arange(grouped_pivot.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(grouped_pivot.shape[0]) + 0.5, minor=False)\n\n#insert labels\nax.set_xticklabels(row_labels, minor=False)\nax.set_yticklabels(col_labels, minor=False)\n\n#rotate label if too long\nplt.xticks(rotation=90)\n\nfig.colorbar(im)\nplt.show()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<pyolite.display.Image at 0x5972858>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 0 Axes>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Visualization is very important in data science, and Python visualization packages provide great freedom. We will go more in-depth in a separate Python visualizations course.</p>\n\n<p>The main question we want to answer in this module is, \"What are the main characteristics which have the most impact on the car price?\".</p>\n\n<p>To get a better measure of the important characteristics, we look at the correlation of these variables with the car price. In other words: how is the car price dependent on this variable?</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"correlation_causation\">5. Correlation and Causation</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p><b>Correlation</b>: a measure of the extent of interdependence between variables.</p>\n\n<p><b>Causation</b>: the relationship between cause and effect between two variables.</p>\n\n<p>It is important to know the difference between these two. Correlation does not imply causation. Determining correlation is much simpler  the determining causation as causation may require independent experimentation.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p><b>Pearson Correlation</b></p>\n<p>The Pearson Correlation measures the linear dependence between two variables X and Y.</p>\n<p>The resulting coefficient is a value between -1 and 1 inclusive, where:</p>\n<ul>\n    <li><b>1</b>: Perfect positive linear correlation.</li>\n    <li><b>0</b>: No linear correlation, the two variables most likely do not affect each other.</li>\n    <li><b>-1</b>: Perfect negative linear correlation.</li>\n</ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Pearson Correlation is the default method of the function \"corr\". Like before, we can calculate the Pearson Correlation of the of the 'int64' or 'float64'  variables.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Sometimes we would like to know the significant of the correlation estimate.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<b>P-value</b>\n\n<p>What is this P-value? The P-value is the probability value that the correlation between these two variables is statistically significant. Normally, we choose a significance level of 0.05, which means that we are 95% confident that the correlation between the variables is significant.</p>\n\nBy convention, when the\n\n<ul>\n    <li>p-value is $<$ 0.001: we say there is strong evidence that the correlation is significant.</li>\n    <li>the p-value is $<$ 0.05: there is moderate evidence that the correlation is significant.</li>\n    <li>the p-value is $<$ 0.1: there is weak evidence that the correlation is significant.</li>\n    <li>the p-value is $>$ 0.1: there is no evidence that the correlation is significant.</li>\n</ul>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can obtain this information using  \"stats\" module in the \"scipy\"  library.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from scipy import stats",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Wheel-Base vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'wheel-base' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['wheel-base'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between wheel-base and price is statistically significant, although the linear relationship isn't extremely strong (~0.585).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Horsepower vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'horsepower' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['horsepower'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n\n<p>Since the p-value is $<$ 0.001, the correlation between horsepower and price is statistically significant, and the linear relationship is quite strong (~0.809, close to 1).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Length vs. Price</h3>\n\nLet's calculate the  Pearson Correlation Coefficient and P-value of 'length' and 'price'.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['length'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between length and price is statistically significant, and the linear relationship is moderately strong (~0.691).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Width vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the Pearson Correlation Coefficient and P-value of 'width' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['width'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "#### Conclusion:\n\nSince the p-value is < 0.001, the correlation between width and price is statistically significant, and the linear relationship is quite strong (\\~0.751).\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Curb-Weight vs. Price\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the Pearson Correlation Coefficient and P-value of 'curb-weight' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['curb-weight'], df['price'])\nprint( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between curb-weight and price is statistically significant, and the linear relationship is quite strong (~0.834).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Engine-Size vs. Price</h3>\n\nLet's calculate the Pearson Correlation Coefficient and P-value of 'engine-size' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['engine-size'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n\n<p>Since the p-value is $<$ 0.001, the correlation between engine-size and price is statistically significant, and the linear relationship is very strong (~0.872).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Bore vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Let's calculate the  Pearson Correlation Coefficient and P-value of 'bore' and 'price':\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['bore'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =  \", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between bore and price is statistically significant, but the linear relationship is only moderate (~0.521).</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can relate the process for each 'city-mpg'  and 'highway-mpg':\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>City-mpg vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['city-mpg'], df['price'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value)  ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>Conclusion:</h4>\n<p>Since the p-value is $<$ 0.001, the correlation between city-mpg and price is statistically significant, and the coefficient of about -0.687 shows that the relationship is negative and moderately strong.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Highway-mpg vs. Price</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pearson_coef, p_value = stats.pearsonr(df['highway-mpg'], df['price'])\nprint( \"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P = \", p_value ) ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "#### Conclusion:\n\nSince the p-value is < 0.001, the correlation between highway-mpg and price is statistically significant, and the coefficient of about -0.705 shows that the relationship is negative and moderately strong.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2 id=\"anova\">6. ANOVA</h2>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>ANOVA: Analysis of Variance</h3>\n<p>The Analysis of Variance  (ANOVA) is a statistical method used to test whether there are significant differences between the means of two or more groups. ANOVA returns two parameters:</p>\n\n<p><b>F-test score</b>: ANOVA assumes the means of all groups are the same, calculates how much the actual means deviate from the assumption, and reports it as the F-test score. A larger score means there is a larger difference between the means.</p>\n\n<p><b>P-value</b>:  P-value tells how statistically significant our calculated score value is.</p>\n\n<p>If our price variable is strongly correlated with the variable we are analyzing, we expect ANOVA to return a sizeable F-test score and a small p-value.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Drive Wheels</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>Since ANOVA analyzes the difference between different groups of the same variable, the groupby function will come in handy. Because the ANOVA algorithm averages the data automatically, we do not need to take the average before hand.</p>\n\n<p>To see if different types of 'drive-wheels' impact  'price', we group the data.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_test2=df_gptest[['drive-wheels', 'price']].groupby(['drive-wheels'])\ngrouped_test2.head(2)",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "df_gptest",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We can obtain the values of the method group using the method \"get_group\".\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "grouped_test2.get_group('4wd')['price']",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We can use the function 'f_oneway' in the module 'stats' to obtain the <b>F-test score</b> and <b>P-value</b>.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# ANOVA\nf_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'], grouped_test2.get_group('4wd')['price'])  \n \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "This is a great result with a large F-test score showing a strong correlation and a P-value of almost 0 implying almost certain statistical significance. But does this mean all three tested groups are all this highly correlated?\n\nLet's examine them separately.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "#### fwd and rwd\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('fwd')['price'], grouped_test2.get_group('rwd')['price'])  \n \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val )",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Let's examine the other groups.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "#### 4wd and rwd\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('rwd')['price'])  \n   \nprint( \"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "scrolled": true,
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h4>4wd and fwd</h4>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "f_val, p_val = stats.f_oneway(grouped_test2.get_group('4wd')['price'], grouped_test2.get_group('fwd')['price'])  \n \nprint(\"ANOVA results: F=\", f_val, \", P =\", p_val)   ",
      "metadata": {
        "trusted": true
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "<h3>Conclusion: Important Variables</h3>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<p>We now have a better idea of what our data looks like and which variables are important to take into account when predicting the car price. We have narrowed it down to the following variables:</p>\n\nContinuous numerical variables:\n\n<ul>\n    <li>Length</li>\n    <li>Width</li>\n    <li>Curb-weight</li>\n    <li>Engine-size</li>\n    <li>Horsepower</li>\n    <li>City-mpg</li>\n    <li>Highway-mpg</li>\n    <li>Wheel-base</li>\n    <li>Bore</li>\n</ul>\n\nCategorical variables:\n\n<ul>\n    <li>Drive-wheels</li>\n</ul>\n\n<p>As we now move into building machine learning models to automate our analysis, feeding the model with variables that meaningfully affect our target variable will improve our model's prediction performance.</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Thank you for completing this lab!\n\n## Author\n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Joseph Santarcangelo</a>\n\n### Other Contributors\n\n<a href=\"https://www.linkedin.com/in/mahdi-noorian-58219234/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Mahdi Noorian PhD</a>\n\nBahare Talayian\n\nEric Xiao\n\nSteven Dong\n\nParizad\n\nHima Vasudevan\n\n<a href=\"https://www.linkedin.com/in/fiorellawever/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2021-01-01\" target=\"_blank\">Fiorella Wenver</a>\n\n<a href=\"https:// https://www.linkedin.com/in/yi-leng-yao-84451275/ \" target=\"_blank\" >Yi Yao</a>.\n\n## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By | Change Description                 |\n| ----------------- | ------- | ---------- | ---------------------------------- |\n| 2020-10-30        | 2.1     | Lakshmi    | changed URL of csv                 |\n| 2020-08-27        | 2.0     | Lavanya    | Moved lab to course repo in GitLab |\n\n<hr>\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}
